// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoRouteClient is the client API for VideoRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoRouteClient interface {
	StreamVideo(ctx context.Context, opts ...grpc.CallOption) (VideoRoute_StreamVideoClient, error)
	PullVideoStream(ctx context.Context, in *PullVideoStreamReq, opts ...grpc.CallOption) (VideoRoute_PullVideoStreamClient, error)
	// app sends a end stream request to server, to set the request to false.
	EndPullVideoStream(ctx context.Context, in *EndPullVideoStreamReq, opts ...grpc.CallOption) (*EmptyVideoResponse, error)
	//a grpc call from de1 to set up the connection, and constantly receive state from server.
	RequestToStream(ctx context.Context, in *InitialConnection, opts ...grpc.CallOption) (VideoRoute_RequestToStreamClient, error)
}

type videoRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoRouteClient(cc grpc.ClientConnInterface) VideoRouteClient {
	return &videoRouteClient{cc}
}

func (c *videoRouteClient) StreamVideo(ctx context.Context, opts ...grpc.CallOption) (VideoRoute_StreamVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoRoute_ServiceDesc.Streams[0], "/video.VideoRoute/StreamVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoRouteStreamVideoClient{stream}
	return x, nil
}

type VideoRoute_StreamVideoClient interface {
	Send(*Video) error
	CloseAndRecv() (*EmptyVideoResponse, error)
	grpc.ClientStream
}

type videoRouteStreamVideoClient struct {
	grpc.ClientStream
}

func (x *videoRouteStreamVideoClient) Send(m *Video) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoRouteStreamVideoClient) CloseAndRecv() (*EmptyVideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoRouteClient) PullVideoStream(ctx context.Context, in *PullVideoStreamReq, opts ...grpc.CallOption) (VideoRoute_PullVideoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoRoute_ServiceDesc.Streams[1], "/video.VideoRoute/PullVideoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoRoutePullVideoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoRoute_PullVideoStreamClient interface {
	Recv() (*PullVideoStreamResp, error)
	grpc.ClientStream
}

type videoRoutePullVideoStreamClient struct {
	grpc.ClientStream
}

func (x *videoRoutePullVideoStreamClient) Recv() (*PullVideoStreamResp, error) {
	m := new(PullVideoStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoRouteClient) EndPullVideoStream(ctx context.Context, in *EndPullVideoStreamReq, opts ...grpc.CallOption) (*EmptyVideoResponse, error) {
	out := new(EmptyVideoResponse)
	err := c.cc.Invoke(ctx, "/video.VideoRoute/EndPullVideoStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoRouteClient) RequestToStream(ctx context.Context, in *InitialConnection, opts ...grpc.CallOption) (VideoRoute_RequestToStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoRoute_ServiceDesc.Streams[2], "/video.VideoRoute/RequestToStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoRouteRequestToStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoRoute_RequestToStreamClient interface {
	Recv() (*Streamrequest, error)
	grpc.ClientStream
}

type videoRouteRequestToStreamClient struct {
	grpc.ClientStream
}

func (x *videoRouteRequestToStreamClient) Recv() (*Streamrequest, error) {
	m := new(Streamrequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoRouteServer is the server API for VideoRoute service.
// All implementations must embed UnimplementedVideoRouteServer
// for forward compatibility
type VideoRouteServer interface {
	StreamVideo(VideoRoute_StreamVideoServer) error
	PullVideoStream(*PullVideoStreamReq, VideoRoute_PullVideoStreamServer) error
	// app sends a end stream request to server, to set the request to false.
	EndPullVideoStream(context.Context, *EndPullVideoStreamReq) (*EmptyVideoResponse, error)
	//a grpc call from de1 to set up the connection, and constantly receive state from server.
	RequestToStream(*InitialConnection, VideoRoute_RequestToStreamServer) error
	mustEmbedUnimplementedVideoRouteServer()
}

// UnimplementedVideoRouteServer must be embedded to have forward compatible implementations.
type UnimplementedVideoRouteServer struct {
}

func (UnimplementedVideoRouteServer) StreamVideo(VideoRoute_StreamVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamVideo not implemented")
}
func (UnimplementedVideoRouteServer) PullVideoStream(*PullVideoStreamReq, VideoRoute_PullVideoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PullVideoStream not implemented")
}
func (UnimplementedVideoRouteServer) EndPullVideoStream(context.Context, *EndPullVideoStreamReq) (*EmptyVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPullVideoStream not implemented")
}
func (UnimplementedVideoRouteServer) RequestToStream(*InitialConnection, VideoRoute_RequestToStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestToStream not implemented")
}
func (UnimplementedVideoRouteServer) mustEmbedUnimplementedVideoRouteServer() {}

// UnsafeVideoRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoRouteServer will
// result in compilation errors.
type UnsafeVideoRouteServer interface {
	mustEmbedUnimplementedVideoRouteServer()
}

func RegisterVideoRouteServer(s grpc.ServiceRegistrar, srv VideoRouteServer) {
	s.RegisterService(&VideoRoute_ServiceDesc, srv)
}

func _VideoRoute_StreamVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoRouteServer).StreamVideo(&videoRouteStreamVideoServer{stream})
}

type VideoRoute_StreamVideoServer interface {
	SendAndClose(*EmptyVideoResponse) error
	Recv() (*Video, error)
	grpc.ServerStream
}

type videoRouteStreamVideoServer struct {
	grpc.ServerStream
}

func (x *videoRouteStreamVideoServer) SendAndClose(m *EmptyVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoRouteStreamVideoServer) Recv() (*Video, error) {
	m := new(Video)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VideoRoute_PullVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullVideoStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoRouteServer).PullVideoStream(m, &videoRoutePullVideoStreamServer{stream})
}

type VideoRoute_PullVideoStreamServer interface {
	Send(*PullVideoStreamResp) error
	grpc.ServerStream
}

type videoRoutePullVideoStreamServer struct {
	grpc.ServerStream
}

func (x *videoRoutePullVideoStreamServer) Send(m *PullVideoStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _VideoRoute_EndPullVideoStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPullVideoStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRouteServer).EndPullVideoStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoRoute/EndPullVideoStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRouteServer).EndPullVideoStream(ctx, req.(*EndPullVideoStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoRoute_RequestToStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitialConnection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoRouteServer).RequestToStream(m, &videoRouteRequestToStreamServer{stream})
}

type VideoRoute_RequestToStreamServer interface {
	Send(*Streamrequest) error
	grpc.ServerStream
}

type videoRouteRequestToStreamServer struct {
	grpc.ServerStream
}

func (x *videoRouteRequestToStreamServer) Send(m *Streamrequest) error {
	return x.ServerStream.SendMsg(m)
}

// VideoRoute_ServiceDesc is the grpc.ServiceDesc for VideoRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoRoute",
	HandlerType: (*VideoRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EndPullVideoStream",
			Handler:    _VideoRoute_EndPullVideoStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamVideo",
			Handler:       _VideoRoute_StreamVideo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PullVideoStream",
			Handler:       _VideoRoute_PullVideoStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RequestToStream",
			Handler:       _VideoRoute_RequestToStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/video.proto",
}
